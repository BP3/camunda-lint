name: Build branch

env:
  GITHUB_IMAGE_NAME: 'ghcr.io/bp3/camunda-lint'
  PROJECT_NAME: 'camunda-lint'

on:
  pull_request:
  workflow_dispatch:

jobs:
  call-workflow-build-image:
    uses: ./.github/workflows/build-image.yaml
    with:
      username: ${{ github.actor }}
      project-name:  ${{ env.PROJECT_NAME }}
      image-name: ${{ env.GITHUB_IMAGE_NAME }}
      branch-name: ${{ github.head_ref || github.ref_name }}
    secrets: inherit

# add at a later date ?
  # VULNERABILITY SCANNING
  vulnerability-scan:
    name: Run vulnerability scan
    runs-on: ubuntu-latest
    needs: call-workflow-build-image
    steps:
      - name: Get image from repository
        run: |
          docker pull $GITHUB_IMAGE_NAME:${{ github.head_ref || github.ref_name }}

      - name: Scan image for vulnerabilities with Trivy
        uses: aquasecurity/trivy-action@0.33.1
        with:
          image-ref: ${{ format('{0}:{1}', env.GITHUB_IMAGE_NAME, github.head_ref || github.ref_name) }}
          format: 'table'
          # Fail the build if any 'fixed' and HIGH or CRITICAL severity vulnerabilities are found.
          exit-code: '1'
          ignore-unfixed: true
          severity: 'HIGH,CRITICAL'

#TODO: add tests at a later date
  # run-tests:
  #   name: Run Integration tests
  #   permissions:
  #     contents: read
  #     packages: read
  #     #pull-requests: write
  #   runs-on: ubuntu-latest
  #   needs: call-workflow-build-image
  #   steps:
      # SMOKE TEST
      # - name: Run container and perform a smoke test
      #   run: |
      #     # Exit if a command fails :: https://www.gnu.org/software/bash/manual/html_node/The-Set-Builtin.html#index-set
      #     set -e

      #     IMAGE_TAG=${{ steps.generate-tag.outputs.tags }}

      #     echo "--- Testing image: $IMAGE_TAG ---"

      #     # Test 1: Run with no command. Should fail and print usage.
      #     echo "--- Running with no command ---"
      #     if docker run --rm $IMAGE_TAG; then
      #       echo "Error: Container exited with code 0 instead of 1."
      #       exit 1
      #     else
      #       echo "Success: Container exited with a non-zero code."
      #     fi

      #     # Test 2: Run the 'help' command. Should succeed and print usage.
      #     echo "--- Running the 'help' command ---"
      #     # Capture the output of the help command
      #     HELP_OUTPUT=$(docker run --rm $IMAGE_TAG help)
      #     echo "$HELP_OUTPUT"
      #     # Check if the output contains a keyword we expect in the help text
      #     if ! echo "$HELP_OUTPUT" | grep -q "Usage:"; then
      #         echo "Error: The help text did not contain 'Usage:'."
      #         exit 1
      #     fi
      #     echo "Success: Help command ran with the expected output."

      #     echo "--- CLI smoke tests passed! ---"

  #     - name: Checkout code
  #       uses: actions/checkout@v3

  #     - name: Set up Docker and dependencies
  #       run: |
  #         sudo apt-get update
  #         sudo apt-get install -y docker-compose libxml2-utils

  #     - name: Login to GitHub Container Registry
  #       uses: docker/login-action@v3
  #       with:
  #         registry: ghcr.io
  #         username: ${{ github.actor }}
  #         password: ${{ secrets.GITHUB_TOKEN }}

  #     - name: Pre-fetch the images we want to use
  #       run: integration-tests/load-images.sh

  #     - name: Pull image to test
  #       run: docker pull $GITHUB_IMAGE_NAME:${{ github.head_ref || github.ref_name }}

  #     - name: Run extract tests
  #       run: integration-tests/test-runner.sh ${{ github.head_ref || github.ref_name }} extract-compose.yaml
